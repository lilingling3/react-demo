'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = factory;

var _reactRedux = require('react-redux');

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _lodash = require('lodash.isempty');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaults = {
  LoadingComponent: 'span',
  failureRedirectPath: '/login',
  wrapperDisplayName: 'AuthWrapper',
  predicate: function predicate(x) {
    return !(0, _lodash2.default)(x);
  },
  authenticatingSelector: function authenticatingSelector() {
    return false;
  },
  allowRedirectBack: true
};

function factory(React, empty) {
  var Component = React.Component;
  var PropTypes = React.PropTypes;


  return function (args) {
    var _defaults$args = _extends({}, defaults, args);

    var authSelector = _defaults$args.authSelector;
    var authenticatingSelector = _defaults$args.authenticatingSelector;
    var LoadingComponent = _defaults$args.LoadingComponent;
    var failureRedirectPath = _defaults$args.failureRedirectPath;
    var wrapperDisplayName = _defaults$args.wrapperDisplayName;
    var predicate = _defaults$args.predicate;
    var allowRedirectBack = _defaults$args.allowRedirectBack;
    var redirectAction = _defaults$args.redirectAction;


    var isAuthorized = function isAuthorized(authData) {
      return predicate(authData);
    };

    var createRedirect = function createRedirect(location, redirect) {
      var query = void 0;
      if (allowRedirectBack) {
        query = { redirect: '' + location.pathname + location.search };
      } else {
        query = {};
      }

      redirect({
        pathname: failureRedirectPath,
        query: query
      });
    };

    // Wraps the component that needs the auth enforcement
    function wrapComponent(DecoratedComponent) {
      var _dec, _class, _class2, _temp2;

      var displayName = DecoratedComponent.displayName || DecoratedComponent.name || 'Component';

      var mapDispatchToProps = function mapDispatchToProps(dispatch) {
        if (redirectAction !== undefined) {
          return { redirect: function redirect(args) {
              return dispatch(redirectAction(args));
            } };
        } else {
          return {};
        }
      };

      var UserAuthWrapper = (_dec = (0, _reactRedux.connect)(function (state, ownProps) {
        return {
          authData: authSelector(state, ownProps, false),
          isAuthenticating: authenticatingSelector(state, ownProps)
        };
      }, mapDispatchToProps), _dec(_class = (_temp2 = _class2 = function (_Component) {
        _inherits(UserAuthWrapper, _Component);

        function UserAuthWrapper() {
          var _Object$getPrototypeO;

          var _temp, _this, _ret;

          _classCallCheck(this, UserAuthWrapper);

          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(UserAuthWrapper)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.getRedirectFunc = function (_ref) {
            var redirect = _ref.redirect;

            if (redirect) {
              return redirect;
            } else {
              if (!_this.context.router.replace) {
                /* istanbul ignore next sanity */
                throw new Error('You must provide a router context (or use React-Router 2.x) if not passing a redirectAction to ' + wrapperDisplayName);
              } else {
                return _this.context.router.replace;
              }
            }
          }, _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(UserAuthWrapper, [{
          key: 'componentWillMount',
          value: function componentWillMount() {
            if (!this.props.isAuthenticating && !isAuthorized(this.props.authData)) {
              createRedirect(this.props.location, this.getRedirectFunc(this.props));
            }
          }
        }, {
          key: 'componentWillReceiveProps',
          value: function componentWillReceiveProps(nextProps) {
            var willBeAuthorized = isAuthorized(nextProps.authData);
            var willbeAuthenticating = nextProps.isAuthenticating;
            var wasAuthorized = isAuthorized(this.props.authData);
            var wasAuthenticating = this.props.isAuthenticating;

            if ( // Redirect if:
            // 1. Was authorized, but no longer and not currently authenticating
            wasAuthorized && !willBeAuthorized && !willbeAuthenticating ||
            // 2. Was not authorized and authenticating but no longer authenticating
            wasAuthenticating && !willbeAuthenticating && !willBeAuthorized) {
              createRedirect(nextProps.location, this.getRedirectFunc(nextProps));
            }
          }
        }, {
          key: 'render',
          value: function render() {
            // Allow everything but the replace aciton creator to be passed down
            // Includes route props from React-Router and authData
            var _props = this.props;
            var redirect = _props.redirect;
            var authData = _props.authData;
            var isAuthenticating = _props.isAuthenticating;

            var otherProps = _objectWithoutProperties(_props, ['redirect', 'authData', 'isAuthenticating']); // eslint-disable-line no-unused-vars


            if (isAuthorized(authData)) {
              return React.createElement(DecoratedComponent, _extends({ authData: authData }, otherProps));
            } else if (isAuthenticating) {
              return React.createElement(LoadingComponent, otherProps);
            } else {
              // Don't need to display anything because the user will be redirected
              return React.createElement(empty);
            }
          }
        }]);

        return UserAuthWrapper;
      }(Component), _class2.displayName = wrapperDisplayName + '(' + displayName + ')', _class2.propTypes = {
        location: PropTypes.shape({
          pathname: PropTypes.string.isRequired,
          search: PropTypes.string.isRequired
        }).isRequired,
        redirect: PropTypes.func,
        authData: PropTypes.object
      }, _class2.contextTypes = {
        // Only used if no redirectAction specified
        router: React.PropTypes.object
      }, _temp2)) || _class);


      return (0, _hoistNonReactStatics2.default)(UserAuthWrapper, DecoratedComponent);
    }

    wrapComponent.onEnter = function (store, nextState, replace) {
      var authData = authSelector(store.getState(), null, true);
      if (!isAuthorized(authData)) {
        createRedirect(nextState.location, replace);
      }
    };

    return wrapComponent;
  };
}